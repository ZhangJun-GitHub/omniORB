GIT使用记录(以1st的为准，这里备用)

su - omniORB
cd $HOME

-----------------------本地库-基本操作,增加、删除、还原------------------------
#初始化
~$git init
初始化空的 Git 版本库于 /home/omniORB/.git/

~$lf
bin/  Downloads/  include/  Jesse/  lib/  mk/  omniORB-4.2.0/  omniORB-4.2.0.tar.bz2*  ReadMe4GIT.txt  share/  stub/

#增加文件夹和文件
~$ git add bin include lib omniORB-4.2.0 omniORB-4.2.0.tar.bz2 share 

#设置用户名
~$ git config --global user.name "User1"

#彩色输出
~$ git config color.ui true

#提交初始化操作
~$ git commit  -m "初始化"　

#查看状态
~$ git status

#删除整个文件夹,同时删除物理文件(未提交，放到缓存区)
~$ git rm -r omniORB-4.2.0     

#对删除内容进行还原(未提交)
~$ git status
~$ git reset #把当前的版本回退到上一个版本:--hard HEAD^ ;那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，可以使用简便命令:git reset  --hard HEAD~100 即可。
~$ git checkout -- omniORB-4.2.0

#删除整个文件夹(提交)
~$ git rm -r omniORB-4.2.0     
~$ git commit -m "测试删除"

#对删除内容进行还原(已提交)
~$ git status
~$ git log    #查看对应的commit的ID
~$ git revert 90bf8b67e2f7e234d64d1f2bb0b9bb26fed39144 #为commit的ID

#对指定内容进行更新
~$ git add  ReadMe4GIT.txt
~$ git commit -m "增加内容"
~$ echo "just for test" >> ReadMe4GIT.txt
~$ git rm -r omniORB-4.2.0     
~$ git status
~$ git add ReadMe4GIT.txt                          #提交到缓存区, 可以通过 git commit -m "默认提交所有缓存区的到版本库"  进行提交
~$ git status
~$ git commit ReadMe4GIT.txt -m "测试更新"         #提交到版本库(可不提交到缓存区直接提交)
~$ git status
~$ git reset
~$ git checkout -- omniORB-4.2.0

#查看更新的具体内容
~$ git log    #查看对应的commit的ID,  git reflog 查看隐藏日志
~$ git show 90bf8b67e2f7e234d64d1f2bb0b9bb26fed39144 #为commit的ID


-----------------------本地库-分支操作与冲突解决------------------------
#查看分支
~$ git branch -a

#建立分支(branch_1)
~$ git branch branch_1   #创建+切换分支: git checkout -b branch_1

#切换分支
~$ git checkout branch_1 
~$ echo "just for test branch_1" >> ReadMe4GIT.txt
~$ git commit  ReadMe4GIT.txt -m "测试分支1"
~$ git checkout master     #切换为主分支,需提交完当前分支的修改,才能切换
~$ tail ReadMe4GIT.txt     #看不到"just for test branch_1"文字
~$ git checkout branch_1   #切换为主分支,需提交完当前分支的修改,才能切换
~$ tail ReadMe4GIT.txt     #可看"just for test branch_1"文字
~$ git checkout -b branch_1_a  #在分支1基础上再分支
~$ echo "just for test branch_1_a" >> ReadMe4GIT.txt
~$ git commit  ReadMe4GIT.txt -m "测试分支1中再建立分支"
~$ tail ReadMe4GIT.txt    #可看到 "just for test branch_1" 和 "just for test branch_1_a" 文字
~$ git checkout master     
~$ tail ReadMe4GIT.txt    #看不到 "just for test branch_1" 和 "just for test branch_1_a" 文字
~$ git checkout -b branch_2 
~$ echo "just for test branch_2" >> ReadMe4GIT.txt
~$ git commit  ReadMe4GIT.txt -m "测试分支2"
~$ tail ReadMe4GIT.txt     #可看"just for test branch_2"文字

分支示意图:
----master----
     |----branch_1----
            |----branch_1_a----
     |----branch_2----

#合并、重命名、删除分支
~$ git checkout branch_1
~$ git merge  branch_1_a  #合并branch_1_a分支到branch_1
~$ tail ReadMe4GIT.txt    #可看到 "just for test branch_1" 和 "just for test branch_1_a" 文字
~$ git checkout master
~$ tail ReadMe4GIT.txt    #看不到 "just for test branch_1" 或 "just for test branch_1_a" 文字
~$ git merge  branch_1    #再合并branch_1分支到master
~$ tail ReadMe4GIT.txt    #可看到 "just for test branch_1" 和 "just for test branch_1_a" 文字
~$ git branch -d branch_1  #删除branch_1分支
~$ git checkout branch_1_a
~$ echo "just for test branch_1_a2" >> ReadMe4GIT.txt
~$ git commit  ReadMe4GIT.txt -m "测试删除上级分支和再合并"
~$ git checkout master
~$ git merge  branch_1_a
~$ tail ReadMe4GIT.txt    #可看到 "just for test branch_1" 和 "just for test branch_1_a" 和 "just for test branch_1_a2" 文字
~$ git branch -m branch_2 dev

分支示意图:
----master----
     |----branch_1_a----
     |----dev----

#合并分支(多层合并测试)、冲突解决
~$ git checkout -b branch_3
~$ echo "just for test branch_3" >> ReadMe4GIT.txt
~$ git commit  ReadMe4GIT.txt -m "测试分支3"
~$ git checkout -b branch_3_a
~$ echo "just for test branch_3_a" >> ReadMe4GIT.txt
~$ git commit  ReadMe4GIT.txt -m "测试分支3上建立分支1"
~$ git branch branch_3_b  branch_3   #在分支3上建立反之3_b 相当于  git checkout branch_3; git checkout -b branch_3_b
~$ git checkout branch_3_b
~$ echo "just for test branch_3_b" >> ReadMe4GIT.txt
~$ git commit  ReadMe4GIT.txt -m "测试分支3上建立分支2"
~$ git checkout master
~$ git merge  branch_3_b  #合并branch_3_b分支到master
~$ tail ReadMe4GIT.txt    
~$ git checkout branch_3
~$ git merge  --no-ff -m "merge with no-ff"  branch_3_a  #合并branch_3_a分支到branch_3, 禁用Fast forward 
~$ git merge  --no-ff -m "merge with no-ff"  branch_3_b  #合并branch_3_b分支到branch_3,这时候会提示冲突
~$ tail ReadMe4GIT.txt    #能看到 <<<<<<<，=======，>>>>>>>标记出不同分支的内容
~$ vi ReadMe4GIT.txt      #修改为正确的内容后，保存
~$ git add ReadMe4GIT.txt
~$ git commit -m "测试分支合并冲突" 
~$ git status
~$ git branch -d branch_3_a
~$ git branch -d branch_3_b
~$ git branch -a
~$ git log --graph --pretty=oneline --abbrev-commit  #查看分支合并图,GIT合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。 如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

分支示意图:
----master----
     |----branch_3----
            |----branch_3_a----
            |----branch_3_b----

其他命令:
git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作
git stash list 查看所有被隐藏的文件列表
git stash apply 恢复被隐藏的文件，但是内容不删除
git stash drop 删除文件
git stash pop 恢复文件的同时 也删除文件


-----------------------远程库,直接clone已有的库-------------------------
#ssh方式,直接连接远程服务器的.git目录
----服务端--------
~$ cd $HOME
~$ /sbin/ifconfig eth0    #查看IP地址
~$ git branch  -a         #查看分支

----客户端--------
$ git clone omniORB@172.16.14.122:/home/omniORB/.git    #username@host:/path/to/repository   本地的可以用 git clone file://$HOME/Dropbox/repo 
$ password:         #输入omniORB的密码
$ cd omniORB/ && ls  #查看克隆下来的内容
$ cat ReadMe4GIT.txt 
$ echo "just for test remote" >> ReadMe4GIT.txt
$ git add ReadMe4GIT.txt
$ git config --global user.name  "remote1"
$ git config --global user.email "remote1@1.com"
$ git commit ReadMe4GIT.txt -m "test for remote"
$ git push origin master    #出现下列错误
[
Counting objects: 4, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 263 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
remote: error: refusing to update checked out branch: refs/heads/master
remote: error: By default, updating the current branch in a non-bare repository
remote: error: is denied, because it will make the index and work tree inconsistent
remote: error: with what you pushed, and will require 'git reset --hard' to match
remote: error: the work tree to HEAD.
remote: error:
remote: error: You can set 'receive.denyCurrentBranch' configuration variable to
remote: error: 'ignore' or 'warn' in the remote repository to allow pushing into
remote: error: its current branch; however, this is not recommended unless you
remote: error: arranged to update its work tree to match what you pushed in some
remote: error: other way.
remote: error:
remote: error: To squelch this message and still keep the default behaviour, set
remote: error: 'receive.denyCurrentBranch' configuration variable to 'refuse'.
To omniORB@172.16.14.122:/home/omniORB/.git
 ! [remote rejected] HEAD -> master (branch is currently checked out)
error: failed to push some refs to 'omniORB@172.16.14.122:/home/omniORB/.git'

#这是由于git默认拒绝了push操作，需要进行设置，修改远端仓库中的.git/config文件，在该文件后面添加如下代码：

[receive]
	denyCurrentBranch = ignore
]

----服务端--------
~$ echo "[receive]" >>  $HOME/.git/config
~$ echo "denyCurrentBranch = ignore" >>  $HOME/.git/config

----客户端--------
$ git push origin master   #推送更新到服务端 


----服务端--------
~$ git pull   #更新远程分支并合并.报错 fatal: 未指定远程版本库。请通过一个URL或远程版本库名指定，用以获取新提交。可使用命令 git remote add origin  omniORB@localhost:$HOME/.git   ,添加本地的库作为远程库,则可以使用pull命令，不过每次要输入密码,而且容易和下面的测试概念混乱，不添加
~$ git reset
~$ git checkout  -- ReadMe4GIT.txt
~$ tail ReadMe4GIT.txt    #可看到"just for test remote" 文字
~$ echo "just for test server add" >> ReadMe4GIT.txt 
~$ git add ReadMe4GIT.txt
~$ git commit ReadMe4GIT.txt -m "for test server add"

----客户端--------
$ git fetch   #更新远程分支，但不会把远程分支修改的合并到本地
$ git pull    #更新远程分支并合并
$ tail ReadMe4GIT.txt    #可看到"just for test remote" 和 "for test server add" 文字


-----------------------远程库,建立裸库，再远程增加已有的库-------------------------
----服务端--------
~$ sudo useradd -m -s /usr/bin/git-shell git
~$ sudo passwd git







-----------------------远程库,Windows下建立远程库-------------------------
在Windows下可以通过 添加 "映射网络驱动器" 然后在本地在clone改网络驱动器的盘符

-----------------------远程库,Bitbucket.org-------------------------------
注册---> UserName:ZhangJun
创建私人代码仓库---> Repositories -> Create repository -> Name:1st;Access level:This is a private repository;Forking:Allow only privae forks;Repository type:Git;Language:C++


~$ git config --global user.email "ZhangJun.Chinese@msn.com"
~$ git config --global user.name "Zhang Jun"
~$ cd /mnt/D/Program/Linux/omniORB
~$ rm -rf .git .gitconfig 
~$ git init
~$ git remote add origin https://ZhangJun@bitbucket.org/ZhangJun/1st.git
~$ echo "ZhangJun" >> contributors.txt
~$ git add contributors.txt
~$ git commit -m 'Initial commit with contributors'
~$ git push -u origin master
输入密码

登录网站则可看到

----添加公钥则无需输入密码 
生成公钥:
~$ ls ~/.ssh/
known_hosts
~$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/UserName/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/UserName/.ssh/id_rsa.
Your public key has been saved in /home/UserName/.ssh/id_rsa.pub.
The key fingerprint is:
b2:c4:aa:ce:ad:50:e5:3c:14:35:00:e3:61:65:17:c8 Jesse@kali
The key's randomart image is:
+--[ RSA 2048]----+
|  =+=+=.         |
| o +Eo .         |
|  . o            |
|   = .           |
|  . + + S        |
| .   + o         |
|.   . .          |
| o o             |
| .=..            |
+-----------------+
~$ ls ~/.ssh/
id_rsa  id_rsa.pub  known_hosts

~$登录Bitbucket.org -> Manage account -> SECURITY -> SSH keys -> Add key -> 把~/.ssh/id_rsa.pub 的内容复制上去

~$使用ssh git@bitbucket.org进行测试
~$ ssh-add ~/.ssh/id_rsa    #不加入则每次登录的时候都要输入私钥密码
Enter passphrase for /home/UserName/.ssh/id_rsa: 
~$ ssh git@bitbucket.org
The authenticity of host 'bitbucket.org (131.103.20.168)' can't be established.
RSA key fingerprint is 97:8c:1b:f2:6f:14:6b:5c:3b:ec:aa:46:46:74:7c:40.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'bitbucket.org,131.103.20.168' (RSA) to the list of known hosts.
PTY allocation request failed on channel 0
logged in as ZhangJun.

You can use git or hg to connect to Bitbucket. Shell access is disabled.
Connection to bitbucket.org closed.
~$ git remote rm origin 
~$ git remote add origin git@bitbucket.org:ZhangJun/1st.git
~$ git push -u origin --all # pushes up the repo and its refs for the first time
~$ git push -u origin --tags # pushes up any tags

